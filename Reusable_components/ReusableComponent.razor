@page "/reusablecomponent"
@using AdvancedBlazorComponents

<h3>ReusableComponent</h3>

@* <ChildComponent /> *@

@* <ChildComponent @ref="childComponent" OnNotifyParent="HandleNotification" /> *@

@code {
    private ChildComponent childComponent;

    private void HandleNotification()
    {
        // Logic to handle notifications from the child component
 	 Console.WriteLine("Notification received from child component");
    }
}
<!--@using Microsoft.AspNetCore.Components

@code {
    [CascadingParameter]
    public string ThemeColor { get; set; }
}

<div style="padding:10px; border:1px solid black;">
    <p style="color:@ThemeColor;">Reusable Component Content</p>
</div>
 at The rate inject DataService DataService

<ul>
    @foreach (var item in DataService.GetData())
    {
        <li>@item</li>
    }
</ul>




at The rate inject DataService DataService
<div>
    <button @onclick="ToggleRenderCondition">ToggleRenderCondition Product List</button>
    @if (ShouldRenderCondition)
    {
        <ul>
            @foreach (var product in DataService.GetProducts())
            {
                <li>@product.Name</li>
            }
        </ul>
    }
</div>

@code{
    private list<string> Products = new List<string> { "Product 1", "Product 2", "Product 3" };
    private bool ShouldRenderCondition = true;
    protected override bool ShouldRender()
    {
        //This function only works when the conditionis met
        return ShouldRenderCondition;
    }
    public void ToggleRenderCondition()
    {
        //This function toggles the condition
        ShouldRenderCondition = !ShouldRenderCondition;
    }
}-->